<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seine – 杂项</title>
    <link>/oiblogs/others%E6%9D%82%E9%A1%B9/</link>
    <description>Recent content in 杂项 on Seine</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Oct 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/oiblogs/others%E6%9D%82%E9%A1%B9/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>OIblogs: C&#43;&#43; STL</title>
      <link>/oiblogs/others%E6%9D%82%E9%A1%B9/c&#43;&#43;-stl/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/oiblogs/others%E6%9D%82%E9%A1%B9/c&#43;&#43;-stl/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>OIblogs: 离散化</title>
      <link>/oiblogs/others%E6%9D%82%E9%A1%B9/%E7%A6%BB%E6%95%A3%E5%8C%96/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/oiblogs/others%E6%9D%82%E9%A1%B9/%E7%A6%BB%E6%95%A3%E5%8C%96/</guid>
      <description>
        
        
        &lt;h1 id=&#34;离散化&#34;&gt;离散化&lt;/h1&gt;
&lt;p&gt;&lt;del&gt;好高深的鸭子&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;其实，用STL水就可以了&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;离散化-1&#34;&gt;离……散化？&lt;/h2&gt;
&lt;p&gt;离散化，就是把无限空间中有限的个体映射到有限的空间中去，以此提高算法的时空效率。即在不改变数据相对大小的条件下，对数据进行相应的缩小。通俗地讲就是当有些数据因为本身很大或者类型不支持，自身无法作为数组的下标来方便地处理，而影响最终结果的只有元素之间的相对大小关系时，我们可以将原来的数据按照从大到小编号来处理问题，即离散化。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;好了，上面的多无聊&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;很简单，就是如果你只需要 $k$ 个数，但是可能存在 $n$ 种情况，你开不下下标为 $n$ 的数组，因此你丢出了离散化来解决这个问题。&lt;/p&gt;
&lt;h2 id=&#34;所以实现&#34;&gt;所以……实现？&lt;/h2&gt;
&lt;p&gt;如果你不嫌累的话，你大可以学习各种各样奇奇怪怪的离散化的方法(包括但不限于Hash、排序)。&lt;/p&gt;
&lt;p&gt;但是，这种非常常见的东西C++ STL里面肯定有啊。&lt;/p&gt;
&lt;p&gt;所以，介绍几个：&lt;/p&gt;
&lt;h3 id=&#34;map&#34;&gt;map&lt;/h3&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;

      </description>
    </item>
    
    <item>
      <title>OIblogs: 差分数组</title>
      <link>/oiblogs/others%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/oiblogs/others%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</guid>
      <description>
        
        
        &lt;h1 id=&#34;差分数组&#34;&gt;差分数组&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;对于第$i$位，记录第$i$位减第$i-1$位的差值。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;下标&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;3&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;4&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;5&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;原数组&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;差分数组&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;
&lt;p&gt;快速进行区间修改操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意!&lt;/strong&gt; 只适用于可被抵消贡献的运算中，如$+/-/\and$​(加、减、异或)等。&lt;/p&gt;
&lt;p&gt;若将原数组$[l,r]$区间内加$val$，则相当于将差分数组第$l$位加$val$，第$r+1$位减去$val$(将贡献抵消)。&lt;/p&gt;
&lt;h6 id=&#34;注意-是第r1位而不是第r位&#34;&gt;&lt;strong&gt;注意! 是第$r+1$位，而不是第$r$​位!!!&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;经常和维和区间和的数据结构一起使用。(&lt;a href=&#34;../data%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.md&#34;&gt;树状数组&lt;/a&gt;等)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>OIblogs: 位运算</title>
      <link>/oiblogs/others%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/oiblogs/others%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>
        
        
        &lt;h1 id=&#34;位运算&#34;&gt;位运算&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;现代计算机中所有的数据均以二进制的形式存储在设备中，即 $0$、$1$ 两种状态计。计算机对二进制数据进行的运算( $+$、$-$、$*$、$/$ )都是位运算，即将符号位共同参与运算的运算。由于计算机内部就是以二进制来存储数据，位运算是相当快的。&lt;/p&gt;
&lt;p&gt;基本的位运算共 $6$ 种，分别为按位与、按位或、按位异或、按位取反、左移和右移。通俗叫法会去掉“按位”，即与、或、异或、取反、左移和右移。&lt;/p&gt;
&lt;p&gt;其中，按位与、按位或、按位异或是将&lt;strong&gt;两个整数&lt;/strong&gt;作为二进制数，对二进制表示中的每一位逐一运算；按位取反、左移和右移是对于某&lt;strong&gt;一个整数&lt;/strong&gt;作为二进制数，对二进制表示中的每一位逐一运算。&lt;/p&gt;
&lt;p&gt;在位运算时，若两个整数的二进制位数不同，则在位数较少的前面补 $0$ 即可。&lt;/p&gt;
&lt;h2 id=&#34;整数二进制表&#34;&gt;整数二进制表&lt;/h2&gt;
&lt;p&gt;这是一张 $0\sim31$ 的 $十进制\longleftrightarrow二进制$ 对照表。&lt;/p&gt;
&lt;p&gt;二进制这个东西可以手推，但是比较麻烦，这张表在位运算的学习和实际应用中很方便比较并找到规律。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;十进制&lt;/th&gt;
&lt;th&gt;二进制&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;00000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;00001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;00010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;00011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;00100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;00101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;00110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;00111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;01000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;01001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;01010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;01011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;01100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;01101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;01110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;01111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;10001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;10010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;10011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;10100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;10101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;10110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;10111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;11000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;11001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;11010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;11011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;11100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;11101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;11110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;11111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;与&#34;&gt;与&lt;/h2&gt;
&lt;p&gt;“与”，就是和的意思。定义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;C++运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数学符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;意义(咋算的)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$&amp;amp;\space、\operatorname{and}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;均为 $1$，则结果为 $1$；任意一个是 $0$，结果为 $0$。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其对应的结果如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数A第 $i$ 位&lt;/th&gt;
&lt;th&gt;数B第 $i$ 位&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;lowbit&#34;&gt;lowbit&lt;/h3&gt;
&lt;p&gt;正确的使用&lt;strong&gt;与&lt;/strong&gt;运算(再加上一点技巧)，可以求出某一个数二进制下最低位的 $1$ 的位置。详情请参见&lt;a href=&#34;../data%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.md&#34;&gt;树状数组&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;或&#34;&gt;或&lt;/h2&gt;
&lt;p&gt;“或”，即或者。定义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;C++运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数学符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;意义(咋算的)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\mid\space、\operatorname{or}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;均为 $0$，则结果为 $0$；任意一个是 $1$，结果为 $1$。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其对应的结果如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数A第 $i$ 位&lt;/th&gt;
&lt;th&gt;数B第 $i$ 位&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;异或&#34;&gt;异或&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;“异或”，大概就是变异的“或”吧。&lt;/del&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;C++运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数学符号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;意义(咋算的)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\oplus\space、\operatorname{xor}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;均为 $0$ 或均为 $1$，结果为 $0$；两个不同(任意一个是 $1$，另一个是 $0$)，结果为 $1$。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其对应的结果如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数A第 $i$ 位&lt;/th&gt;
&lt;th&gt;数B第 $i$ 位&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;异或与加法&#34;&gt;异或与加法&lt;/h3&gt;
&lt;p&gt;一个定理：$a\oplus{b}\le{a+b}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们发现，位运算不进位；而加法运算当两个位都是 $1$ 时会进位。因此，观察上表，异或运算的得数是加法运算进位后剩余的数字。&lt;/p&gt;
&lt;p&gt;因此，在加法不进位时，$a\oplus{b}={a+b}$；加法进位时，$a\oplus{b}&amp;lt;{a+b}$。&lt;/p&gt;
&lt;h2 id=&#34;取反&#34;&gt;取反&lt;/h2&gt;
&lt;p&gt;“取反”，顾名思义，就是 $0$ 变 $1$；&lt;/p&gt;
&lt;h2 id=&#34;左移&#34;&gt;左移&lt;/h2&gt;
&lt;h2 id=&#34;右移&#34;&gt;右移&lt;/h2&gt;

      </description>
    </item>
    
  </channel>
</rss>
